//  Zero-One Knapsack
//
//  Created by Fahim Al Mahmud on 5/8/19.
//  Copyright Â© 2019 Fahim Al Mahmud. All rights reserved.
//

#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> weight;
vector<int> profit;


//                    ALGORITHM EXPLAINATION
//        To consider all subsets of items, there can be two cases for every item: (1) the item is included in the optimal subset, (2) not included in the optimal set.
//        Therefore, the maximum value that can be obtained from n items is max of following two values.
//        1) Maximum value obtained by n-1 items and W weight (excluding nth item).
//        2) Value of nth item plus maximum value obtained by n-1 items and W minus weight of the nth item (including nth item).
//
//        If weight of nth item is greater than W, then the nth item cannot be included and case 1 is the only possibility.
//                    ALGORITHM EXPLAINATION


//Time Complexity O(2^n)
int zero_one_knapsack_recursive(int n, int capacity) {
    
    int result;
    if(n == 0 || capacity == 0)
        result = 0;
    
    else if(weight[n]>capacity)
        result = zero_one_knapsack_recursive(n-1, capacity);
    else {
        int value1 = zero_one_knapsack_recursive(n-1, capacity);
        int value2 = profit[n] + zero_one_knapsack_recursive(n-1, capacity-weight[n]);
        
        result = max(value1, value2);
    }
    return result;
}


//Time Complexity O(n * capacity)
int zero_one_knapsack_bottom_up_tabulation(int n, int capacity) {
    
    int dp[n+1][capacity+1];
    
    for(int i=0;i<=n;i++) {
        for(int j=0;j<=capacity;j++) {
            if(i==0 || j==0) {
                dp[i][j] = 0;
            } else if(weight[i-1]<=j) {
                dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i-1]] + profit[i-1]);
            } else {
                dp[i][j] = dp[i-1][j];
            }
        }
    }
    
    
    //print the items weight for which the profit is maximum
    int result = dp[n][capacity], WT = capacity;
    puts("");
    printf("{ ");
    for(int i=n; i>0 && result>0 ; i--)
    {
        if(result != dp[i-1][WT]) {
            printf("%d ",weight[i-1]);
            result -= profit[i-1];
            WT -= weight[i-1];
        }
    }
    printf("} = ");
    //print the items weight for which the profit is maximum
    
    
    
    return dp[n][capacity];
}

int main(int argc, const char * argv[]) {

//        SAMPLE INPUT
//            6 10
//            10 3
//            2 7
//            6 6
//            3 1
//            5 8
//            1 2
//        SAMPLE INPUT
    
    int n, capacity, w, p;
    
    cin>>n>>capacity;
    
    for(int i=0;i<n;i++) {
        cin>>w>>p;
        weight.push_back(w);
        profit.push_back(p);
    }
    //Time Complexity O(2^n)
    cout<<zero_one_knapsack_recursive(n, capacity)<<endl;
    
    
    //Time Complexity O(n * capacity)
    cout<<zero_one_knapsack_bottom_up_tabulation(n, capacity)<<endl;
    
    return 0;
}
