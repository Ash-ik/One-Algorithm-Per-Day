//  Longest Common Subsequence
//
//  Created by Fahim Al Mahmud on 23/7/19.
//  Copyright Â© 2019 Fahim Al Mahmud. All rights reserved.
//

#include <iostream>
#include <string>
using namespace std;

#define maximum(a,b) a<b?a:b
//  finds LCS of two string a and b and prints them. Time complexity of this algorithm is O(mn)
//  where m is the length of the string a and n is the length of the string b
void LCS(string a, string b) {
    
    
    int lenA = a.length();
    int lenB = b.length();
    //  create a 2D table dp where it's i,j index will contain the length of the LCS
    //  of string a[0--i] and string b[0--j]
    
    int dp[lenA+1][lenB+1];
    
    for(int i=0;i<=lenA;i++) {
        for(int j=0;j<=lenB;j++) {
            
            //  as in 0,0 index both string a and b is empty, their LCS will have 0 length
            if(i == 0 || j == 0)
                dp[i][j] = 0;
            
            //  if both strings last character matches then the LCS length increases by 1
            else if(a.at(i-1) == b.at(j-1)) {
                dp[i][j] = dp[i-1][j-1] + 1;
            }
            //  if both strings last character do not match then the LCS is the maximum between
            //  dp tables two adjacent cell of the (i,j) index which is (i-1,j) and (i,j-1)
            else {
                dp[i][j] = maximum(dp[i-1][j],dp[i][j-1]);
            }
        }
    }
    //dp[lenA][lenB] is the length of our desired LCS of this two string
    
    //print LCS
    int last_index = dp[lenA][lenB];
    
    string lcs;
    
    // Start from the right-most-bottom-most corner and
    // one by one store characters in lcs[]
    int i = lenA, j = lenB;
    while (i > 0 && j > 0)
    {
        // If current character in string a and string b are same, then
        // current character is part of LCS
        if (a.at(i-1) == b.at(j-1))
        {
            lcs += a.at(i-1); // Put current character in result
            i--; j--; last_index--;     // reduce values of i, j and last_index
        }
        
        // If not same, then find the larger of two and
        // go in the direction of larger value
        else if (dp[i-1][j] > dp[i][j-1])
            i--;
        else
            j--;
    }
    //as we are building the string from the end side, we need to reverse it to get the actual result;
    reverse(lcs.begin(), lcs.end());
    
    // Print the lcs
    cout << "LCS of " << a << " and " << b << " is " << lcs <<endl;
}


int main() {
    
   
    //sample input
    //LONGEST
    //NICEST
    
    //sample output
    //NEST
    
    
    //take two string as input
    string a,b;
    cin>>a>>b;
    
    LCS(a, b);
    
    return 0;
}
